{
	"swagger": "2.0",
	"info": {
	  "description": "Swagger for BouffeSqueJtePrepare",
	  "version": "1.0.0",
	  "title": "Bouffe Sque Jte Prepare",
	  "termsOfService": "http://swagger.io/terms/",
	  "contact": {
		"email": "apiteam@swagger.io"
	  },
	  "license": {
		"name": "Apache 2.0",
		"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
	  }
	},
	"host": "petstore.swagger.io",
	"basePath": "/v2",
	"tags": [
	  {
		"name": "recipe",
		"description": "Access to all recipe orders"
	  },
	  {
		"name": "user",
		"description": "Operations about user",
		"externalDocs": {
		  "description": "Find out more about our store",
		  "url": "http://swagger.io"
		}
	  }
	],
	"schemes": [
	  "https",
	  "http"
	],
	"paths": {
	  "/user/{userId}/ingredient": {
		"put": {
		  "tags": [
			"user"
		  ],
		  "summary": "Update an existing ingredient",
		  "description": "",
		  "operationId": "updateIngredient",
		  "consumes": [
			"application/json"
		  ],
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "in": "path",
			  "name": "userId",
			  "description": "id of user",
			  "required": true,
			  "type": "integer",
			  "format": "int64"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "useur object that needs to be added to the DB",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Ingredient"
			  }
			}
		  ],
		  "responses": {
			"400": {
			  "description": "Bad Request"
			},
			"404": {
			  "description": "user not found"
			},
			"405": {
			  "description": "Validation exception"
			}
		  },
		  "security": [
			{
			  "petstore_auth": [
				"write:pets",
				"read:pets"
			  ]
			}
		  ]
		}
	  },
	  "/user/{userId}/ingredient/{ingredientId}": {
		"get": {
		  "tags": [
			"user"
		  ],
		  "summary": "Find ingredient by ID",
		  "description": "Returns a single ingredient",
		  "operationId": "getIngredienttById",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "ingredientId",
			  "in": "path",
			  "description": "ID of pet to return",
			  "required": true,
			  "type": "integer",
			  "format": "int64"
			},
			{
			  "name": "userId",
			  "in": "path",
			  "description": "ID of pet to return",
			  "required": true,
			  "type": "integer",
			  "format": "int64"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "successful operation",
			  "schema": {
				"$ref": "#/definitions/Ingredient"
			  }
			},
			"400": {
			  "description": "Invalid ID supplied"
			},
			"404": {
			  "description": "Ingredient not found"
			}
		  },
		  "security": [
			{
			  "api_key": [
  
			  ]
			}
		  ]
		},
		"delete": {
		  "tags": [
			"user"
		  ],
		  "summary": "Deletes a user",
		  "description": "",
		  "operationId": "deleteUser",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "api_key",
			  "in": "header",
			  "required": false,
			  "type": "string"
			},
			{
			  "name": "ingredientId",
			  "in": "path",
			  "description": "Pet id to delete",
			  "required": true,
			  "type": "integer",
			  "format": "int64"
			},
			{
			  "name": "userId",
			  "in": "path",
			  "description": "ID of pet to return",
			  "required": true,
			  "type": "integer",
			  "format": "int64"
			}
		  ],
		  "responses": {
			"400": {
			  "description": "Invalid ID supplied"
			},
			"404": {
			  "description": "Pet not found"
			}
		  },
		  "security": [
			{
			  "petstore_auth": [
				"write:pets",
				"read:pets"
			  ]
			}
		  ]
		}
	  },
	  "/recipe": {
		"get": {
		  "tags": [
			"recipe"
		  ],
		  "summary": "Returns all recipe",
		  "description": "Returns a map of status codes to quantities",
		  "operationId": "getInventory",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
  
		  ],
		  "responses": {
			"200": {
			  "description": "successful operation",
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/Recipe"
				}
			  }
			}
		  },
		  "security": [
			{
			  "api_key": [
  
			  ]
			}
		  ]
		},
		"post": {
		  "tags": [
			"recipe"
		  ],
		  "summary": "Place a recipe in DB",
		  "description": "",
		  "operationId": "placeOrder",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "description": "",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/Recipe"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "successful operation",
			  "schema": {
				"$ref": "#/definitions/Recipe"
			  }
			},
			"400": {
			  "description": "Invalid Order"
			}
		  }
		}
	  },
	  "/recipe/{recipeId}": {
		"get": {
		  "tags": [
			"recipe"
		  ],
		  "summary": "Find purchase order by ID",
		  "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
		  "operationId": "getOrderById",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "recipeId",
			  "in": "path",
			  "description": "ID of pet that needs to be fetched",
			  "required": true,
			  "type": "integer",
			  "maximum": 10,
			  "minimum": 1,
			  "format": "int64"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "successful operation",
			  "schema": {
				"$ref": "#/definitions/Recipe"
			  }
			},
			"400": {
			  "description": "Invalid ID supplied"
			},
			"404": {
			  "description": "Order not found"
			}
		  }
		},
		"delete": {
		  "tags": [
			"recipe"
		  ],
		  "summary": "Delete purchase order by ID",
		  "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
		  "operationId": "deleteOrder",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "recipeId",
			  "in": "path",
			  "description": "ID of the order that needs to be deleted",
			  "required": true,
			  "type": "integer",
			  "minimum": 1,
			  "format": "int64"
			}
		  ],
		  "responses": {
			"400": {
			  "description": "Invalid ID supplied"
			},
			"404": {
			  "description": "Order not found"
			}
		  }
		}
	  },
	  "/user": {
		"post": {
		  "tags": [
			"user"
		  ],
		  "summary": "Create user",
		  "description": "This can only be done by the logged in user.",
		  "operationId": "createUser",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "in": "body",
			  "name": "body",
			  "description": "Created user object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/User"
			  }
			}
		  ],
		  "responses": {
			"default": {
			  "description": "successful operation"
			}
		  }
		}
	  },
	  "/user/{userId}/addIngredient": {
		"post": {
		  "tags": [
			"user"
		  ],
		  "summary": "Creates list of users with given input array",
		  "description": "",
		  "operationId": "createUsersWithListInput",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "in": "path",
			  "name": "userId",
			  "description": "id of user",
			  "required": true,
			  "type": "integer",
			  "format": "int64"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "List of user object",
			  "required": true,
			  "schema": {
				"type": "array",
				"items": {
				  "$ref": "#/definitions/User"
				}
			  }
			}
		  ],
		  "responses": {
			"default": {
			  "description": "successful operation"
			}
		  }
		}
	  },
	  "/user/login": {
		"get": {
		  "tags": [
			"user"
		  ],
		  "summary": "Logs user into the system",
		  "description": "",
		  "operationId": "loginUser",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "userId",
			  "in": "query",
			  "description": "The user name for login",
			  "required": true,
			  "type": "string"
			},
			{
			  "name": "password",
			  "in": "query",
			  "description": "The password for login in clear text",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "successful operation",
			  "schema": {
				"type": "string"
			  },
			  "headers": {
				"X-Rate-Limit": {
				  "type": "integer",
				  "format": "int32",
				  "description": "calls per hour allowed by the user"
				},
				"X-Expires-After": {
				  "type": "string",
				  "format": "date-time",
				  "description": "date in UTC when token expires"
				}
			  }
			},
			"400": {
			  "description": "Invalid username/password supplied"
			}
		  }
		}
	  },
	  "/user/logout": {
		"get": {
		  "tags": [
			"user"
		  ],
		  "summary": "Logs out current logged in user session",
		  "description": "",
		  "operationId": "logoutUser",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
  
		  ],
		  "responses": {
			"default": {
			  "description": "successful operation"
			}
		  }
		}
	  },
	  "/user/{userId}": {
		"get": {
		  "tags": [
			"user"
		  ],
		  "summary": "Get user by user name",
		  "description": "",
		  "operationId": "getUserByName",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "userId",
			  "in": "path",
			  "description": "The name that needs to be fetched. Use user1 for testing. ",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "successful operation",
			  "schema": {
				"$ref": "#/definitions/User"
			  }
			},
			"400": {
			  "description": "Invalid username supplied"
			},
			"404": {
			  "description": "User not found"
			}
		  }
		},
		"put": {
		  "tags": [
			"user"
		  ],
		  "summary": "Updated user",
		  "description": "This can only be done by the logged in user.",
		  "operationId": "updateUser",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "userId",
			  "in": "path",
			  "description": "name that need to be updated",
			  "required": true,
			  "type": "string"
			},
			{
			  "in": "body",
			  "name": "body",
			  "description": "Updated user object",
			  "required": true,
			  "schema": {
				"$ref": "#/definitions/User"
			  }
			}
		  ],
		  "responses": {
			"400": {
			  "description": "Invalid user supplied"
			},
			"404": {
			  "description": "User not found"
			}
		  }
		},
		"delete": {
		  "tags": [
			"user"
		  ],
		  "summary": "Delete user",
		  "description": "This can only be done by the logged in user.",
		  "operationId": "deleteUser",
		  "produces": [
			"application/json"
		  ],
		  "parameters": [
			{
			  "name": "userId",
			  "in": "path",
			  "description": "The name that needs to be deleted",
			  "required": true,
			  "type": "string"
			}
		  ],
		  "responses": {
			"400": {
			  "description": "Invalid username supplied"
			},
			"404": {
			  "description": "User not found"
			}
		  }
		}
	  }
	},
	"securityDefinitions": {
	  "petstore_auth": {
		"type": "oauth2",
		"authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
		"flow": "implicit",
		"scopes": {
		  "write:pets": "modify pets in your account",
		  "read:pets": "read your pets"
		}
	  },
	  "api_key": {
		"type": "apiKey",
		"name": "api_key",
		"in": "header"
	  }
	},
	"definitions": {
	  "Recipe": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "integer",
			"format": "int64"
		  },
		  "listIngredient": {
			"type": "array",
			"items": {
			  "$ref": "#/definitions/Ingredient"
			}
		  },
		  "name": {
			"type": "string"
		  },
		  "description": {
			"type": "string"
		  }
		},
		"xml": {
		  "name": "Order"
		}
	  },
	  "Category": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "integer",
			"format": "int64"
		  },
		  "name": {
			"type": "string"
		  }
		},
		"xml": {
		  "name": "Category"
		}
	  },
	  "User": {
		"type": "object",
		"properties": {
		  "id": {
			"type": "integer",
			"format": "int64"
		  },
		  "username": {
			"type": "string"
		  },
		  "firstName": {
			"type": "string"
		  },
		  "lastName": {
			"type": "string"
		  },
		  "email": {
			"type": "string"
		  },
		  "password": {
			"type": "string"
		  },
		  "phone": {
			"type": "string"
		  },
		  "userStatus": {
			"type": "integer",
			"format": "int32",
			"description": "User Status"
		  },
		  "listIngredient": {
			"type": "array",
			"items": {
			  "$ref": "#/definitions/Ingredient"
			}
		  }
		},
		"xml": {
		  "name": "User"
		}
	  },
	  "Ingredient": {
		"type": "object",
		"required": [
		  "name"
		],
		"properties": {
		  "id": {
			"type": "integer",
			"format": "int64"
		  },
		  "quantity": {
			"type": "integer",
			"format": "int64"
		  },
		  "category": {
			"$ref": "#/definitions/Category"
		  },
		  "name": {
			"type": "string",
			"example": "doggie"
		  },
		  "photoUrls": {
			"type": "array",
			"items": {
			  "type": "string"
			}
		  },
		  "tags": {
			"type": "array",
			"items": {
			  "type": "string"
			}
		  },
		  "status": {
			"type": "string",
			"description": "pet status in the store",
			"enum": [
			  "fresh",
			  "out of date"
			]
		  }
		},
		"xml": {
		  "name": "Pet"
		}
	  },
	  "ApiResponse": {
		"type": "object",
		"properties": {
		  "code": {
			"type": "integer",
			"format": "int32"
		  },
		  "type": {
			"type": "string"
		  },
		  "message": {
			"type": "string"
		  }
		}
	  }
	},
	"externalDocs": {
	  "description": "Find out more about Swagger",
	  "url": "http://swagger.io"
	}
  }