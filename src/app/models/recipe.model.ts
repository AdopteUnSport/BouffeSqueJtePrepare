/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


import { Ingredient } from './ingredient.model';
import { status } from '';

export interface IRecipe {
    id?: number;
    urlRecipe?: string;
    listIngredient?: Array<Ingredient>;
    status?: status;
    complete?: boolean;
}


export class Recipe extends BaseModel implements IRecipe  {

    static ID_FIELD_NAME = 'id';
    static URL_RECIPE_FIELD_NAME = 'urlRecipe';
    static LIST_INGREDIENT_FIELD_NAME = 'listIngredient';
    static STATUS_FIELD_NAME = 'status';
    static COMPLETE_FIELD_NAME = 'complete';

    id: number;
    urlRecipe: string;
    listIngredient: Array<Ingredient>;
    /** Order Status */
    status: status;
    complete: boolean;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
        super();
        this.listIngredient = new Array<Ingredient>(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.id = rawValues.id;
            this.urlRecipe = rawValues.urlRecipe;
            this.fillModelArray<Ingredient>(this, Recipe.LIST_INGREDIENT_FIELD_NAME, rawValues.listIngredient, useFormGroupValuesToModel, Ingredient, SubTypeFactory.createSubTypeInstance);
            this.status = rawValues.status;
            this.complete = rawValues.complete;
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                id: new FormControl(this.id),
                urlRecipe: new FormControl(this.urlRecipe),
                listIngredient: new FormArray([]),
                status: new FormControl(this.status, [enumValidator(status), ]),
                complete: new FormControl(this.complete),
            });
            // generate FormArray control elements
            this.fillFormArray<Ingredient>(Recipe.LIST_INGREDIENT_FIELD_NAME, this.listIngredient, Ingredient);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls[Recipe.ID_FIELD_NAME].setValue(this.id);
        this.$formGroup.controls[Recipe.URL_RECIPE_FIELD_NAME].setValue(this.urlRecipe);
        this.fillFormArray<Ingredient>(Recipe.LIST_INGREDIENT_FIELD_NAME, this.listIngredient, Ingredient);
        this.$formGroup.controls[Recipe.STATUS_FIELD_NAME].setValue(this.status);
        this.$formGroup.controls[Recipe.COMPLETE_FIELD_NAME].setValue(this.complete);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}

